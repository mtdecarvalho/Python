 Primeiro, nosso objetivo é filtrar os eventos por data. Vamos em views.py e alteramos a lista_eventos:

@login_required(login_url='/login/')
def lista_eventos(request):
    usuario = request.user
    data_atual = datetime.now() - timedelta(hours=1)
    evento = Evento.objects.filter(usuario=usuario,
                                   data_evento__gt=data_atual)
    dados = {'eventos': evento}
    return render(request, 'agenda.html', dados)

__gt = greater than = maior que.

Agora vamos em models e criamos uma função para pegar eventos atrasados:

    def get_evento_atrasado(self):
        if self.data_evento < datetime.now():
            return True
        else:
            return False

Que irá nos dizer se o evento em questão está realmente atrasado. Antes de fazermos os ajustes, precisamos setar o fuso horário em settings.py:

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = False

Agora sim, em agenda.html:

<div style={% if evento.get_evento_atrasado %}
                                "color:red"
                           {% endif %}>
                    {{ evento.titulo }} - {{ evento.get_data_evento }}
                    ( <a href="evento/?id={{ evento.id }}">Editar</a>
                    / <a href="evento/delete/{{ evento.id }}">Excluir</a> )
                </div>

Agora sobre tipos de responses, depois de setar a timezone e setando em settings.py Debug para falso e allowed hosts para ['*'] (todos), podemos começar a manipular mensagens de erro. Um exemplo seria de um usuário tentando deletar um evento que não existe. Para isso, alteramos a função delete_evento:

@login_required(login_url='/login/')
def delete_evento(request, id_evento):
    usuario = request.user
    try:
        evento = Evento.objects.get(id=id_evento)
    except Exception:
        raise Http404()

    if (usuario == evento.usuario):
        evento.delete()
    else:
        raise Http404()

    return redirect('/')

Também temos o json_response. Para demonstrar ele criamos um novo path:

    path('agenda/lista/<int:id_usuario>/', views.json_lista_evento),

E criamos essa view:

def json_lista_evento(request, id_usuario):
    usuario = User.objects.get(id=id_usuario)
    evento = Evento.objects.filter(usuario=usuario).values('id', 'titulo')
    return JsonResponse(list(evento), safe=False)

